use std::str::FromStr;
use crate::model;

grammar;

pub Expr: model::Expression = {
    <a:Add> => a,
};

pub Add: model::Expression = {
    <a:Add> "+" <m:Mul> => model::Expression::Add(vec![a, m]),
    <m:Mul> => m,
};

pub Mul: model::Expression = {
    <m:Mul> "*" <u:Unary> => model::Expression::Mul(vec![m, u]),
    <u:Unary> => u,
};

pub Unary: model::Expression = {
    "(" <e:Expr> ")" => e,
    <l:Lit> => model::Expression::Lit(l),
};

Lit: model::Literal = {
    "[" <es:Comma<Expr>> "]" => model::Literal::List(es),
    <s:QuotedString> => model::Literal::String(s),
    <i:Int> => model::Literal::I64(i),
};

QuotedString: String = {
    <raw: r#""[^"]*""#> => String::from(&raw[1..raw.len() - 1])
};

Int: i64 = {
    r"[0-9]+" => i64::from_str(<>).unwrap(),
};

Comma<T>: Vec<T> = {
    <vs:(<T> ",")*> <v:T?> => match v {
        None => vs,
        Some(v) => {
            let mut vs = vs;
            vs.push(v);
            vs
        }
    }
};
